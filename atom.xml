<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Teddywu]]></title>
  <link href="http://teddywuinfo.github.com/atom.xml" rel="self"/>
  <link href="http://teddywuinfo.github.com/"/>
  <updated>2013-12-15T18:53:50+08:00</updated>
  <id>http://teddywuinfo.github.com/</id>
  <author>
    <name><![CDATA[Teddywu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[翻译]JavaScript一波流]]></title>
    <link href="http://teddywuinfo.github.com/blog/2013/12/15/introduction-to-full-stack-javascript/"/>
    <updated>2013-12-15T10:54:00+08:00</updated>
    <id>http://teddywuinfo.github.com/blog/2013/12/15/introduction-to-full-stack-javascript</id>
    <content type="html"><![CDATA[<p>原文来自<a href="http://coding.smashingmagazine.com/2013/11/21/introduction-to-full-stack-javascript/#more-129418">An Introduction To Full-Stack JavaScript</a></p>

<p>现在，要开发web应用，你有非常多技术方案可以选择，而你想要选择最合适的一种，这种方案必须敏捷快速，持续迭代，高效可靠等等。你想要这种技术精简和灵活，而且无论是短期还是长期都帮助你成功。但这些技术方案不总是那么容易找到。</p>

<p>据我所知，<a href="http://theothersideofcode.com/building-full-javascript-application-stack">JavaScript一波流（full-stack JavaScript）</a>满足所有要求。你可能之前也听说过，觉得它没用，甚至和朋友辩论。但你自己有真的试过吗？在本文，我会给你详细介绍一波流JavaScript，以及它到底是怎么运作的。</p>

<!-- more -->


<p>给一个概要图：</p>

<p><img src="http://teddywuinfo.github.com/images/full-stack-javascript/toptal-blog-500-opt.png" alt="概要图" /></p>

<p>我会逐部分介绍这些组件。在此之前，我简单说下我们是怎么发展到现在这样的。</p>

<h2>为什么我选择JavaScript</h2>

<p>从1998年起，我就是一个web开发者。那时候，我们在用<a href="http://www.theperlreview.com/articles/php.html">Perl</a>进行后台开发。而在那时候，我们已经在用JavaScript进行前端开发。Web后台开发技术从那时起开始发生巨大变化：我们经历过一波又一波技术和语言的发展浪潮，比如PHP、ASP、JSP、.NET、Ruby、Python还有很多。</p>

<p>在PHP和ASP年代的早期，那时候模版引擎还是一个概念，开发者把应用程序代码内嵌到HTML里面。像这样的代码并非罕见。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">$login</span> <span class="o">==</span> <span class="kc">true</span><span class="p">){</span>
</span><span class='line'>    <span class="o">?&gt;</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Welcome&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="o">?&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<p>甚至有：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">users_deleted</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>        <span class="nx">$arr_ids</span> <span class="o">=</span> <span class="nx">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">foreach</span><span class="p">(</span><span class="nx">$arr_ids</span> <span class="nx">as</span> <span class="nx">$value</span><span class="p">){</span>
</span><span class='line'>    <span class="o">?&gt;</span>
</span><span class='line'>    <span class="nx">users_deleted</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;&lt;php&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="o">?&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于初学者来说，在不同语言之间存在典型的错误和令人困惑的语句，比如<code>for</code>和<code>foreach</code>。而且，甚至在现在，在前台和后台写这样的代码来处理相同的数据结构，是让人很不爽的(除非，你有一个开发团队，有人专门负责前台，有专门负责后台。如果这样的话，就算他们知道对方在做什么，也很难读懂对方的代码。)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>    <span class="nv">$arr</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;apples&quot;</span><span class="p">,</span> <span class="s2">&quot;bananas&quot;</span><span class="p">,</span> <span class="s2">&quot;oranges&quot;</span><span class="p">,</span> <span class="s2">&quot;strawberries&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">$obj</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$arr</span> <span class="k">as</span> <span class="nv">$fruit</span><span class="p">){</span>
</span><span class='line'>        <span class="nv">$obj</span><span class="p">[</span><span class="nv">$fruit</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$i</span> <span class="o">+=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">    $.ajax({</span>
</span><span class='line'><span class="x">        url:&quot;/json.php&quot;,</span>
</span><span class='line'><span class="x">        success: function(data){</span>
</span><span class='line'><span class="x">            var x;</span>
</span><span class='line'><span class="x">            for(x in data){</span>
</span><span class='line'><span class="x">                alert(&quot;fruit:&quot; + x + &quot; points:&quot; + data[x]);</span>
</span><span class='line'><span class="x">            }</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">    });</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初尝试统一前后台语言的方案，是在服务器端创建前端组件，然后把组件编译成JavaScrpt。但实际不如预期，大部分那样的项目失败了（比如 ASP MVC 替代 <a href="http://stackoverflow.com/questions/102558/biggest-advantage-to-using-asp-net-mvc-vs-web-forms">ASP.NET Web form</a>，<a href="http://www.gwtproject.org/overview.html">GWT</a>逐渐被<a href="http://www.2ality.com/2013/05/google-polymer.html">Polymer</a>替代）。但这个想法其实不赖，因为从本质上说，前后台统一语言，然我们可以重用组件和<em>资源</em>（这个是关键字）。</p>

<p>答案很简单：把JavaScript 放到后台。</p>

<p>JavaScript实际上<a href="http://www.infoworld.com/d/application-development/javascript-conquers-the-server-969">一发明出来的时候是用于网景企业服务器端的</a>，但这个语言在那时候还没做好。经过多年反复试验，<a href="http://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js">Node.js</a>最终出现了。它不仅把JavaScript放到服务器端，也促进了<a href="http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/">非阻塞性编程</a>,这个从nginx世界而来的概念。这多亏Node发明人的nginx开发背景，(明智地)保持简单，多亏了JavaScript的event-loop特性。</p>

<p>（一句话概括，非阻塞性编程目的在于把耗时任务放一边，指明当这些任务完成之后要做些啥之后，腾出处理器来处理其他请求。）</p>

<p><strong> Node.js 从此改变了我们处理I/O请求的方式。</strong> 作为Web开发者。我们很熟悉这样访问数据库（I/O）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">resultset</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM &#39;table&#39;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">drawTable</span><span class="p">(</span><span class="nx">resultset</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这一行实际上会阻塞你的代码，因为你的程序会停止运行直到你的数据库返回数据 <em>resultset</em>。在此期间，你的架构会提供线程来提高并发性。</p>

<p>有了Node.js和非阻塞性编程，我们对程序流程有了更多的控制。现在（你仍然可以使用线程提高并发），你可以告诉程序在请求数据的同时，你可以做什么，还有数据到达之后，要怎么处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM &#39;table&#39;&quot;</span><span class="p">,</span> <span class="kd">function</span>  <span class="nx">resultset</span><span class="p">){</span>
</span><span class='line'>   <span class="nx">drawTable</span><span class="p">(</span><span class="nx">resultset</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">doSomeThingElse</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过这个代码片段，我们可以看到两段程序流程：第一个在发送数据库查询请求之后，立刻执行；第二个在我们受到返回<em>resultSet</em>之后执行。这是一个优雅又强大的管理并发性的方案。就像他们说的：“除了你的代码，所有都是并发执行。”因此，你的代码很容易编写、阅读、理解和维护，不用担心你的程序流程失去控制。</p>

<p>这些想法并不新鲜，但为什么因为Node.js的出现，这些东西又突然流行起来呢？很简单。非阻塞性变成可以通过不同方法实现，最简单的可能就是使用回调(callback)和事件轮询(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/EventLoop">event loop</a>)。对于大部分语言而言，这个并不容易实现。有些语言使用回调很常见，但缺很少使用事件轮询。又或者你需要折腾一些外部库（比如，Python 和 <a href="http://www.tornadoweb.org/en/stable/">Tornado</a>）。</p>

<p>但是在JavaScript里面，<a href="http://www.impressivewebs.com/callback-functions-javascript/">回调</a>是一种语言特性，事件轮询也是。几乎所有玩过JavaScript的程序员都熟悉这些东西，或者至少用过，<a href="http://developer.yahoo.com/blogs/ydn/part-1-understanding-event-loops-writing-great-code-11401.html">即使他们不太懂啥是事件轮询</a>。突然所有创业公司只需要找JavaScript程序员就可以同时搞定前台和后台，减轻了不少招聘难题。</p>

<p>我们现有了一个很牛X的平台（感谢非阻塞性编程），和一个很简单的编程语言（感谢JavaScript）。这就足够了吗？它会持续多久？我很肯定，JavaScript在将来会越来越受到重视。我告诉你原因.</p>

<h3>函数式编程</h3>

<p>JavaScript是第一个<a href="http://www.crockford.com/javascript/javascript.html">把函数范式普及给大众</a>的程序语言。当然，Lisp是第一个，但大部分程序员不会用它来写商业应用。Lisp 和 Selp，这两个<a href="http://exploringdata.github.io/vis/programming-languages-influence-network/#JavaScript">对JavaScript影响最大</a>的语言，充满了革新的概念，可以改变我们的思维，让我们去探索新的技术、模式。这些全都带到了JavaScript里面来。<a href="http://blog.jcoglan.com/2011/03/05/translation-from-haskell-to-javascript-of-selected-portions-of-the-best-introduction-to-monads-ive-ever-read/">moands</a>,<a href="http://uxul.wordpress.com/2009/03/02/generating-church-numbers-with-javascript/">Church numbers</a>，甚至 <a href="http://underscorejs.org/">Underscore</a> 的 <a href="http://underscorejs.org/#collections">collection functions</a>，都可以节省不少代码。</p>

<h3>动态对象和原型继承</h3>

<p>没有类的面向对象编程，脱离了无穷无尽的类的继承，提高了开发效率——只需要创建对象和方法，然后使用他们。 最重要的，它减少了代码重构的代价，因为程序员只需要修高对象的实例，而不用修改类。这种高效和灵活为敏捷开发铺平了道路。</p>

<h3>JavaScript是互联网的</h3>

<p>JavaScript是为<a href="http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.pdf">互联网而设计的</a>。它从一开始就存在，并且<a href="http://www.netmagazine.com/news/firefox-23-hide-disable-javascript-option-132851">不会消失</a>.所有破坏它的尝试都失败了。回想一下，比如，<a href="http://jaxenter.com/douglas-crockford-java-was-a-colossal-failure-javascript-is-succeeding-because-it-works-45928.html">Java Applet</a>的衰落，VBScript被微软的<a href="http://www.typescriptlang.org/">TypeScript</a>（可编译成JavaScript）替代，以及Flash在<a href="http://www.buuteeq.com/blog/html5-and-the-death-of-flash/">移动市场和HTML5</a>方向的失败。替代JavaScript并不影响成千上万的网页，是不可能的啦。所以我们的目标就是改善它。而没有比<a href="http://www.ecma-international.org/memento/TC39.htm">ECMA 39技术委员会</a>更胜任这项工作。</p>

<p>当然，每天都有想替代JavaScript的新事物出现，比如<a href="http://coffeescript.org/">CoffeeScript</a>，<a href="http://www.typescriptlang.org/">TypeScript</a>，和一大堆<a href="https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS">可以编译成JavaScript的语言</a>。这些替代品可能在开发过程比较有用（通过<a href="http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/">source maps</a>）,但最终他们还是替代不了JavaScript。有两个原因：他们的组织委员会不会更强大，而且他们最好的特性会被ECMAScript采用（比如JavaScript）。JavaScript 不是汇编语言，它是高级程序语言，它的源代码你可以理解，因此，你应该理解它。</p>

<h2> 端对端JavaScript：Node.js 和 MongoDB</h2>

<p>我们已经谈到使用JavaScript的原因，接下来，我们谈谈为什么要使用Node.js和MongodDB。</p>

<h3>Node.js</h3>

<p><a href="http://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js">Node.js</a>是一个构建快速和可扩展网络应用的平台。就像Node.js网站说的那样。但Node.js不仅是那样，它是目前最热的JavaScript运行时环境，被大量应用和库使用着，——<strong>甚至浏览器库也运行在Node.js之上</strong>。最重要的是，这个高效的后台执行让开发者专注于更复杂的问题，比如<a href="https://github.com/NaturalNode/natural">Natural</a>用于<a href="http://en.wikipedia.org/wiki/Natural_language_processing">自然语言处理</a>。就算你不打算用Node.js写你的主要服务器端程序，你也可以使用基于Node.js构建的工具提高开发效率。比如，<a href="http://bower.io/">Bower</a>，是一个前端工具包管理器，<a href="http://visionmedia.github.io/mocha/">Mocha</a>用于单元测试，<a href="http://gruntjs.com/">Grunt</a>用于自动化任务构建，甚至<a href="http://brackets.io/">Brackets</a>用于全文代码编辑。</p>

<p>因此，如果你打算写JavaScript应用，你应该掌握Node.js。因为你经常要跟它打交道。或许有一些有趣的<a href="http://vertx.io/">替代品</a>出现，但没有一个有Node.js社区的10%那么强大。</p>

<h3>MongoDB</h3>

<p><a href="http://www.mongodb.org/">MongoDB</a> 是一个<a href="https://en.wikipedia.org/wiki/NoSQL">NoSQL</a>文档型数据库，并使用JavaScript作为查询语言（但不是用JavaScript来实现），从而实现了让JavaScript成为从前端到后端的统一语言的可能。但这不是选择这个数据库最主要的目的。</p>

<p><a href="http://www.mongodb.org/">MongoDB</a> 是<a href="http://blog.mongodb.org/post/119945109/why-schemaless">无模式的（schema-less）</a>，使得你可以更灵活地持有对象。因此可以快速因需而变。再加上，它是高度<a href="http://siliconangle.com/blog/2013/06/21/mongodb-brings-speed-scalability-and-performance-to-handling-unstructured-data-mongodbdays/">可扩展的</a>和<a href="http://docs.mongodb.org/manual/core/map-reduce/">基于map-reduce的</a>，使得它适合大数据应用。MongoDB很灵活，它可以用作无模式的文档型数据库，也可以用作关系型数据库（虽然它<a href="">缺乏</a>了<a href="http://docs.mongodb.org/manual/faq/fundamentals/">事务(transaction)</a>，只能通过<a href="http://docs.mongodb.org/manual/tutorial/perform-two-phase-commits/">模拟</a>来实现），甚至也可以用于key-value存储缓存，像<a href="http://memcached.org/">Memcached</a> 和 <a href="http://redis.io/">Redis</a>。</p>

<h2>用Express实现服务器端组件化 </h2>

<p>服务器端组建化从来都不简单。但有了<a href="http://expressjs.com/">Express</a>(和 <a href="http://www.senchalabs.org/connect/">Connect</a>)之后，产生了“中间件”的概念。在我看来，中间件是对与服务器端组件的最好定义。</p>

<p>这里的基础概念就是你的组件是管道的一部分。管道处理一个请求（比如一个输入），然后生成响应（比如输出），但你的组件不用对整个响应输出负责。它只处理它需要处理的地方，然后交接给管道的下一个模块。当管道最后一个模块完成处理的时候，就把最终响应发送回给客户端。</p>

<p>我们把这些管道的中间模块成为中间件。很自然地，我们可以创造两种中间件：</p>

<ul>
<li><strong>直接件</strong></li>
</ul>


<p>直接件处理请求和响应，但不对最终响应结果负责，它只需要交接给下一个中间件。</p>

<ul>
<li><strong>最后件</strong></li>
</ul>


<p>最后件最最终响应负责。它处理请求和响应，但不需要交接给下一个中间件。实际上，无论怎样都交接给下一个中间件，会使得架构更加灵活（比如以后要增加中间件的话），就算那个中间件并不存在（如果这样的话，响应会自动返回给客户端）</p>

<p><img src="http://teddywuinfo.github.com/images/full-stack-javascript/user-manager-large-opt.png" alt="用户管理器" /></p>

<p>举个具体的例子   ，比如说一个“用户管理器”服务器组件。从中间件的角度来说，我们直接件和最后件都有。作为最后件，我们有像创建用户和展示用户列表这类的功能。但在做那些操作之前，我们需要直接件来做登录验证（因为我们不想未经过登录校验的请求过来并创建新的用户）。一旦我们创建好了这些登录验证中间件，我们只需要在我们想要的地方添加一下它们，就可以增加登录校验的特性。</p>

<h2>单页应用</h2>

<p>当使用JavaScript一波流的使用，你经常遇到创建<a href="http://en.wikipedia.org/wiki/Single-page_application">单页应用</a>(SPA)。大部分WEB开发者都亲自鼓捣过。我也搞过几次（大部分自己搞的）。而我相信它们就是<a href="https://medium.com/tech-talk/fb44da86dc1f">未来的web应用</a>。你是否对比过SPA和常规web应用在移动设备上的表现。响应速度根本不在一个数量级。</p>

<p>（注：其他人可能不同意我的观点，比如，twitter，<a href="https://blog.twitter.com/2012/improving-performance-twittercom">回滚了它的SPA版本</a>。与此同时，大量网站，比如<a href="http://techcrunch.com/2012/11/30/why-enterprise-apps-are-moving-to-single-page-design/">Zendesk</a>正在朝这方向发展。SPA有足够多的优点让我相信它，但实际发展有可能千差万别。）</p>

<p>如果SPA真的那么牛X，为毛线不用呢？一个常见的反对声音就是他们担心SEO（搜索引擎优化）。但如果你处理得当，这个不是什么问题：你可以选择不同的方法，比如<a href="https://vickev.com/#!/article/easily-index-your-single-page-application-thanks-to-phantomjs">使用一个无界面的浏览器引擎</a>，（<a href="http://phantomjs.org/">PhantomJS</a>）在框架的帮助下，当网页爬虫监测到的时候，去渲染HTML。</p>

<h2>前端 MV* 框架，使用Backbone.js,Marionette和Twitter Bootstrap</h2>

<p>用于SPA的<a href="http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/">MV*框架</a>已经讨论了很多，很难选，我觉得最优秀三个是<a href="http://backbonejs.org/">Backbone.js</a>、<a href="http://emberjs.com/">Ember</a>和<a href="http://angularjs.org/">AngularJS</a>。</p>

<p>这三个都非常值得推荐，<a href="http://todomvc.com/">哪个最适合你呢</a>？</p>

<p>遗憾的是，我觉得对AngularJS还不够熟悉，所以这里我不讨论它。Ember 和 Backbone.js 代表了两个不同的解决思路。</p>

<p><a href="http://www.toptal.com/backbone-js/">Backbone.js</a>只提供刚刚够用的东西，让你创建一个简单的SPA.Ember，是一个完整、专业的框架让你创建SPA。它有很多额外的功能，但这需要花更多时间学习。（你可以看更多<a href="http://coding.smashingmagazine.com/2013/11/07/an-in-depth-introduction-to-ember-js/">关于Ember.js的资料</a>。）</p>

<p>根据你的应用的复杂度来决定。简单地说，你要在“features used” 和 &#8220;features available&#8221; 两者之间取得合适的点。这是个重要的提示。</p>

<p>写样式也是一项挑战，当然，我们也可以用框架来解决。对于CSS，<a href="http://twitter.github.io/bootstrap/">Twitter Bootstrap</a> 是一个不错的选择。因为它提供了一套完整的样式，不仅可以立刻使用，也<a href="http://coding.smashingmagazine.com/2013/03/12/customizing-bootstrap/">支持自定义</a>。</p>

<p>Bootstrap 使用<a href="http://lesscss.org/">LESS</a>写的，开源。所以你可以随意修改。它有一堆UX控件，有非常好的<a href="http://twitter.github.io/bootstrap/components.html">文档</a>。再加上，<a href="http://twitter.github.io/bootstrap/customize.html">自定义模型</a>让你可以轻松创建自己的样式，非常实用。</p>

<h2>最佳实践：Grunt,Mocha,Chai,RequireJS和CoverJS</h2>

<p>最后，我们说一下一些最佳实践技巧，以及怎么实现和维护他们。我的解决方案集中在服务器端的工具，它们都是基于Node.js的。</p>

<h3>MOCHA 和 CHAI</h3>

<p>这些工具让你可以在开发过程中使用<a href="http://www.agiledata.org/essays/tdd.html">测试驱动开发（TDD）</a>和<a href="http://dannorth.net/introducing-bdd/">行为驱动开发(BDD)</a>，来组织你的单元测试，并且让测试自动运行。</p>

<p>JavaScript单元测试框架有<a href="http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#JavaScript">一大堆</a>，为什么要用Mocha？最短的答案，因为它灵活而且完整。</p>

<p>详细的讲，因为它有两个重要的特性（好的接口，好的记录器）还有一个重要的空缺（断言）。让我解释一下：</p>

<ul>
<li><strong>接口</strong></li>
</ul>


<p>也许你习惯于TDD的理念和它的单元测试，或许你更倾向于BDD的概念，比如 <strong>describe</strong> 和 <strong>should</strong>。这两者，Mocha的接口都可以满足。</p>

<ul>
<li><strong>记录器</strong></li>
</ul>


<p>测试跑完之后会产生结果文档，你可以选择不同的记录器去格式化这些结果。例如，如果你需要维护一个持续集成的服务器，你可以用一个记录器专门负责它。</p>

<ul>
<li><strong>没有断言的功能</strong></li>
</ul>


<p>与其做一个有问题的断言功能，还不如自己选择第三方的断言库，让你有更高的灵活性。你有许多<a href="http://stackoverflow.com/questions/10472152/standalone-assertion-libraries#answer-10480546">选择</a>，这就是Chai要出场的时候了。</p>

<p>Chai 是一个灵活的断言库，让你拥有三种主要的断言风格：</p>

<ul>
<li><code>assert</code></li>
</ul>


<p>这是经典TDD的断言风格：</p>

<figure class='code'><figcaption><span>assert  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">variable</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>expect</code></li>
</ul>


<p>这种链式风格最常见于BDD：</p>

<figure class='code'><figcaption><span>expect  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">variable</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>should</code></li>
</ul>


<p>这也用于BDD，但我更喜欢<code>expect</code>因为<code>should</code>经常重复（比如行为说明文档“it(should do something&#8230;)”），例如：</p>

<figure class='code'><figcaption><span>should</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">variable</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Chai和Mocha结合很完美。用这两个库你可以用TDD、BDD或者你想用的方式去写你的测试用例。</p>

<h3>GRUNT</h3>

<p>Grunt实现了自动化任务构建,包括简单的复制粘贴、合并文件、模板预编译、样式语言（比如SASS 和 LESS）编译，单元测试（比如Mocha），语法检测和代码压缩（比如，<a href="https://github.com/mishoo/UglifyJS">UglifyJS</a>和<a href="https://developers.google.com/closure/compiler/">Closure Compiler</a>）。你可以添加你自己的任务到Grunt或者<a href="http://gruntjs.com/plugins">搜索已有的插件</a>。一大堆的插件供你使用（再强调下，背后拥有强大社区的工具是很值得一用的）。Grunt可能够<a href="https://github.com/gruntjs/grunt-contrib-watch">监控你的文件</a>然后当你改动他们的时候触发某些行为。</p>

<h3>REQUIREJS</h3>

<p>RequireJS 听起来就像基于<a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD</a>API的模块加载器，但我向你保证它远不止那样。有了RequireJS,你可以在你的模块上定义依赖和继承，并让RequireJS帮你加载。它也<strong>通过简单的方式避免全局变量命名空间污染</strong>，这通过把你的模块在函数内部定义来实现。这使得模块可复用，而不像<a href="http://www.kenneth-truyers.net/2013/04/27/javascript-namespaces-and-modules/">命名空间化的模块</a>。思考一下这样的场景：如果你定义了一个模块像这样子——<code>Demoapp.helloWorldModule</code> 然后你想把它移植到<code>Firstapp.helloWorldModule</code>，那么你需要改变所有<code>Demoapp</code>的引用，来让它可移植。</p>

<p>RequireJS 让你拥抱<a href="http://merrickchristensen.com/articles/javascript-dependency-injection.html">dependency injection</a>模式。假设你有一个模块需要主程序对象（一个单例）的实例。使用RequireJS,你意识到你不能使用全局变量去存储它，而且你不能通过依赖获得实例。因此，你需要在模块构造函数引入这个依赖。看个例子。</p>

<p>在<code>main.js</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">(</span>
</span><span class='line'>  <span class="p">[</span><span class="s2">&quot;App&quot;</span><span class="p">,</span><span class="s2">&quot;module&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">App</span><span class="p">,</span> <span class="nx">Module</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">App</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Module</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">app</span><span class="o">:</span> <span class="nx">app</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">app</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>module.js</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([],</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">){</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">app</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">app</span><span class="p">;</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>      <span class="nx">module</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">useApp</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">app</span><span class="p">.</span><span class="nx">performAction</span><span class="p">();</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">module</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意到，我们要让模块依赖<code>main.js</code>的话，比如创建循环引用。</p>

<h3>COVERJS</h3>

<p><a href="https://en.wikipedia.org/wiki/Code_coverage">代码覆盖</a>是衡量你的测试用例的尺度标准。就像名字那样，它告诉你有多少代码被你当前的测试用例覆盖到。CoverJS的测试是基于语句的（而不是基于行，像<a href="http://siliconforks.com/jscoverage/">JSCoverage</a>）。它生成代码覆盖质量报告。它也可以堆你的持续集成的服务器发送报告。</p>

<h2>结论</h2>

<p>JavaScript一波流不能解决所有问题。但它的社区和技术可以肯定对你有所帮助。通过JavaScript，你可以创建扩展性强，可维护的应用，并统一用一种语言。这绝B是未来的趋势啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ie6 bug 收集]]></title>
    <link href="http://teddywuinfo.github.com/blog/2013/08/24/ie6/"/>
    <updated>2013-08-24T15:50:00+08:00</updated>
    <id>http://teddywuinfo.github.com/blog/2013/08/24/ie6</id>
    <content type="html"><![CDATA[<ul>
<li>ie6 下空div height 100% 无效</li>
<li>ie6 position fixed无效</li>
<li>ie6 overflow hidden 失效 解决方法：把父节点的position设为&#8221;relative&#8221;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[WP8开发] 在wp8中如何实现富文本显示（图文混排）？]]></title>
    <link href="http://teddywuinfo.github.com/blog/2013/03/21/how-to-display-rick-textblock-in-wp8/"/>
    <updated>2013-03-21T15:12:00+08:00</updated>
    <id>http://teddywuinfo.github.com/blog/2013/03/21/how-to-display-rick-textblock-in-wp8</id>
    <content type="html"><![CDATA[<p>一个简单的场景：一条feeds里面包含了文本，QQ表情，还有超链接，和图片。如何展示。</p>

<p>这里需要用到一个控件叫做<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.controls.richtextblock%28v=vs.95%29.aspx">RickTextBlock(System.Windows.Controls.RickTextBlock)</a>。这个控件在工具箱里面找不到，但是可以XAML里面直接手写输入得到。用法比较简单，我直接上代码了。我这里把文本、图片和链接封装了一下，方便调用。代码如下：</p>

<!--more -->


<p>XAML:</p>

<pre><code>&lt;Grid x:Name="ContentPanel" Grid.Row="1" Margin="12,0,12,0"&gt;
    &lt;RichTextBox x:Name="RickTextBox"&gt;

    &lt;/RichTextBox&gt;
&lt;/Grid&gt;
</code></pre>

<p>C#:</p>

<pre><code>public partial class MainPage : PhoneApplicationPage {
    // 构造函数
    public MainPage() {
        InitializeComponent();
        Paragraph p = new Paragraph();
        List&lt;MyBlock &gt; BlockList = new List&lt; MyBlock&gt;();
        BlockList.Add( new MyTextBlock ("今天天气不错!！今天天气不错!！今天天气不错!！今天天气不错!！" , Colors.LightGray));
        BlockList.Add( new ImageBlock("http://ctc.qzs.qq.com/qzone/em/e113.png" ));
        BlockList.Add( new UrlBlock("http://user.qzone.qq.com/312315220" , "点击进入我的空间"));
        foreach (MyBlock block in BlockList) {
            p.Inlines.Add(block.getInline());
        }
        RickTextBox.Blocks.Add(p);
    }
}

public class MyBlock {
    public virtual Inline getInline() {
        return null ;
    }
}

/// &lt;summary&gt;
/// 超链接
/// &lt;/summary&gt;
public class UrlBlock : MyBlock {
    private string _url;
    private string _text;
    public UrlBlock(string url, string text) {
        _url = url;
        _text = text;
    }
    public override Inline getInline() {
        Hyperlink hl = new Hyperlink();
        hl.Foreground = new SolidColorBrush (Colors.Blue);
        hl.TargetName = "ExternalWebTask" + DateTime.Now.Millisecond;
        hl.Click += HyperlinkButton_Click;
        hl.Inlines.Add(System.Net. HttpUtility.UrlDecode(_text));
        hl.NavigateUri = new Uri(System.Net.HttpUtility .UrlDecode(_url), UriKind.Absolute);
        return hl;
    }


    private void HyperlinkButton_Click(object sender, RoutedEventArgs e) {
        if (e == null &amp;&amp; e.OriginalSource as Hyperlink == null) {
            return;
        }
        if ((e.OriginalSource as Hyperlink).NavigateUri == null) {
            return;
        }
        WebBrowserTask task = new WebBrowserTask();
        task.Uri = (e.OriginalSource as Hyperlink ).NavigateUri;
        try {
            task.Show();
        } catch (Exception ex) {
            System.Diagnostics. Debug.WriteLine(ex.ToString());
        }
    }
}


/// &lt;summary&gt;
/// 图片
/// &lt;/summary&gt;
public class ImageBlock : MyBlock {
    private string _emoUrl;
    public ImageBlock(string url) {
        _emoUrl = url;
    }


    public override Inline getInline() {
        Image image = new Image();
        BitmapImage bm = new BitmapImage();
        Uri emoUri = new Uri(_emoUrl, UriKind.Absolute);
        image.Source = new BitmapImage (emoUri);
        image.Width = 24;
        image.Height = 24;
        InlineUIContainer iuc = new InlineUIContainer();
        iuc.Child = image;
        return iuc;
    }
}

/// &lt;summary&gt;
/// 纯文字
/// &lt;/summary&gt;
public class MyTextBlock : MyBlock {
    private string _text;
    private Color _color;
    public MyTextBlock(string text) {
        _text = text;
    }
    public MyTextBlock(string text, Color color) {
        _text = text;
        _color = color;
    }
    public override Inline getInline() {
        Run r = new Run();
        if (_color.ToString() != "#00000000" ) {
            r.Foreground = new SolidColorBrush (_color);
        }
        r.Text = _text;
        r.FontSize = 20;
        return r;
    }
}
</code></pre>

<p>富文本展示demo:<a href="http://teddywuinfo.github.com/plugin/rich-textblock-demo.rar">点击下载附件</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[WP8开发]利用WriteableBitmap图片压缩的两种方法]]></title>
    <link href="http://teddywuinfo.github.com/blog/2013/03/19/tow-way-to-compress-image-using-writeablebitmap/"/>
    <updated>2013-03-19T09:59:00+08:00</updated>
    <id>http://teddywuinfo.github.com/blog/2013/03/19/tow-way-to-compress-image-using-writeablebitmap</id>
    <content type="html"><![CDATA[<p>在WP8 QZONE项目开发过程中，需要实现图片上传功能，那么上传图片之前，出于节省用户的流量和提高上传速度，需要先把图片进行压缩后再上传。利用WriteableBitmap 可以轻松实现图片压缩。</p>

<!-- more -->


<p>方案一： 利用DecodeJpeg 和SaveJpeg方法实现图片压缩</p>

<pre><code>byte[] UploadPictureProcess(byte[] bytes) {
    using (MemoryStream ms = new MemoryStream(bytes)) {
        using (MemoryStream toSM = new MemoryStream()) {
            WriteableBitmap bt;
            //输入stream，得到WriteableBitmap 
            bt = Microsoft.Phone.PictureDecoder.DecodeJpeg(ms);
            //GetSize的作用以压缩前的宽高，算出压缩后的宽高
            Size size = GetSize(new Size(bt.PixelWidth, bt.PixelHeight));
            //通过减少图片宽高和压缩率，来降低图片大小
            //GetCompressRatio()方法得到压缩率
            bt.SaveJpeg(toSM, (int)size.Width, (int)size.Height, 0, GetCompressRatio());
            bt = null;
            return toSM.ToArray();
        }
    }
}
</code></pre>

<p>利用方案一已经可以实现图片压缩了，但在调用DecodeJpeg方法的时候，会瞬间占用大量内存。如果图片较大的情况下或者批量上传图片的时候，容易因为内存不足crash。为什么呢？经过分析发现，这里主要是WriteableBitmap 占用了较大内存，一个WriteableBitmap 所占用的内存为像素高<em>像素宽</em>4那么大的内存。DecodeJpeg函数创建了原图像素高*原图像素宽那么大的WriteableBitmap，其实并不需要那么大，只需要用压缩后的高宽大小就够用了。 因此可以用Render函数代替DecodeJpeg，通过设置transfrom的缩放因子调正WriteableBitmap 的像素宽高，降低内存占用。因此有了方案二。</p>

<p>方案二： 利用Render和SaveJpeg方法</p>

<p>利用WriteableBitmap 的Render函数，Render 接收两个参数，一个是原图的控件，一个是图片变换(Transform)。 函数根据图片变换的参数对原图进行处理，返回 WriteableBitmap。这里的图片变换可以是放大、缩小、位移、旋转等等。我们可以通过设置图片变换的缩放因子ScaleX和ScaleY ——让WriteableBitmap 进行缩小。</p>

<pre><code>byte[] UploadPictureProcess(byte[] bytes) {
    using (MemoryStream ms = new MemoryStream(bytes)) {
        using (MemoryStream toSM = new MemoryStream()) {
            Image image = new Image();
            BitmapImage bitmap = new BitmapImage();
            bitmap.SetSource(ms);
            image.Source = bitmap;
            //GetSize的作用以压缩前的宽高，算出压缩后的宽高
            Size size = GetSize(new Size(bitmap.PixelWidth, bitmap.PixelHeight));
            //先得到压缩后的宽高，并创建以该宽高创建一个WriteableBitmap 
            WriteableBitmap wb = new WriteableBitmap((int)size.Width, (int)size.Height);
            ScaleTransform transform = new ScaleTransform();
            //ScaleX和ScaleY是缩放因子，这里计算压缩前后宽高的缩放比例，得到图片变换(transfrom)对象，作为Render的参数
            transform.ScaleX = size.Width / bitmap.PixelWidth;
            transform.ScaleY = size.Height / bitmap.PixelHeight;
            //通过Render绘制到WriteableBitmap 
            wb.Render(image, transform);
            wb.Invalidate();
            //这里也是一样通过减少图片宽高和压缩率，来降低图片大小
            //GetCompressRatio()方法得到压缩率
            Extensions.SaveJpeg(wb, toSM, (int)size.Width, (int)size.Height, 0, GetCompressRatio()); 
            bitmap = null;
            image.Source = null;
            image = null;
            wb = null;
            return toSM.ToArray();
        }
    }
}
</code></pre>

<p>方案二跟方案一相比的内存占用量相比相差是很明显的。压缩效果也是一样。因此得到比较满意的图片压缩方案。这里进行分享下，欢迎拍砖~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[bug 分享] octopress rake deploy 时无法连接ssh]]></title>
    <link href="http://teddywuinfo.github.com/blog/2013/03/16/octopree-rake-deploy-ssh-connect-timed-out/"/>
    <updated>2013-03-16T19:42:00+08:00</updated>
    <id>http://teddywuinfo.github.com/blog/2013/03/16/octopree-rake-deploy-ssh-connect-timed-out</id>
    <content type="html"><![CDATA[<p>用octopress在公司写好博客，打算发布，卡在rake deploy 的时候，问题如下：</p>

<!-- more -->


<pre><code>C:\Users\teddywu.TENCENT\devkit\octopress\_deploy&gt;rake deploy
(in C:/Users/teddywu.TENCENT/devkit/octopress)
## Deploying branch to Github Pages
rm -rf _deploy/assets
rm -rf _deploy/atom.xml
rm -rf _deploy/blog
rm -rf _deploy/CNAME
rm -rf _deploy/favicon.ico
rm -rf _deploy/favicon.png
rm -rf _deploy/font
rm -rf _deploy/images
rm -rf _deploy/index.html
rm -rf _deploy/javascripts
rm -rf _deploy/robots.txt
rm -rf _deploy/sitemap.xml
rm -rf _deploy/stylesheets

## copying public to _deploy
cp -r public/. _deploy
cd _deploy

## Commiting: Site updated at 2013-03-16 10:44:32 UTC
# On branch master
nothing to commit, working directory clean

## Pushing generated _deploy website
ssh: connect to host ssh.github.com port 443: Bad file number
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

## Github Pages deploy complete
cd -

C:\Users\teddywu.TENCENT\devkit\octopress\_deploy&gt;
</code></pre>

<p>错误提示：</p>

<pre><code>ssh: connect to host ssh.github.com port 443: Bad file number
fatal: Could not read from remote repository.
</code></pre>

<p>我猜，是不是由于网络问题不能通过ssh访问git呢？那我先判断下是不是ssh访问不了git..我重新在本机使用Git创建SSH Key</p>

<pre><code> ssh-keygen -C "username@email.com" -t rsa
</code></pre>

<p>并按照<a href="http://www.cnblogs.com/javac/archive/2012/07/31/2617432.html" title="创建ssh key">这里</a>的方法创建ssh key 并连接到github。一测试，发现：</p>

<pre><code>teddywu@TEDDYWU-PC4 /C/Users/teddywu/devkit/octopress (source)
$ ssh -v git@github.com
OpenSSH_4.6p1, OpenSSL 0.9.8e 23 Feb 2007
debug1: Reading configuration data /c/Users/teddywu.TENCENT/.ssh/config
debug1: Applying options for github.com
debug1: Connecting to ssh.github.com [207.97.227.248] port 443.
debug1: connect to address 207.97.227.248 port 443: Attempt to connect timed out
without establishing a connection
ssh: connect to host ssh.github.com port 443: Bad file number
teddywu@TEDDYWU-PC4 /C/Users/teddywu.TENCENT/devkit/octopress (source)
$
</code></pre>

<p>我知道是我的ssh出问题了，估计是公司网络禁用了ssh。幸好git可以通过https、git、ssh三种协议来读写。公司网络https是可以走的，那我只需要更改下octopress 提交git 的方式。我在<code>Octopress</code>目录下全文搜索<code>deploy</code>。找到了可疑文件<code>Rakefile</code>文件，打开看下，发现<code>rake preview</code>、<code>rake generate</code>、<code>rake deploy</code>等脚本其实都写在这。于是我看了下 <code>rake deploy</code> 和<code>rake  setup_github_pages</code>的实现。</p>

<p>setup_github_pages的代码片段：</p>

<pre><code>cd "#{deploy_dir}" do
    system "git init"
    system "echo 'My Octopress Page is coming soon &amp;hellip;' &gt; index.html"
    system "git add ."
    system "git commit -m \"Octopress init\""
    system "git branch -m gh-pages" unless branch == 'master'
    system "git remote add origin #{repo_url}"
    rakefile = IO.read(__FILE__)
    rakefile.sub!(/deploy_branch(\s*)=(\s*)(["'])[\w-]*["']/, "deploy_branch\\1=\\2\\3#{branch}\\3")
    rakefile.sub!(/deploy_default(\s*)=(\s*)(["'])[\w-]*["']/, "deploy_default\\1=\\2\\3push\\3")
    File.open(__FILE__, 'w') do |f|
      f.write rakefile
    end
end
</code></pre>

<p>发现在<code>setup_github_pages</code> 的时候，在<code>_deploy</code>文件夹里面创建了一个新的git仓库，并以用户提交的ssh url 作为名为origin 的远程库的url路径。那么就好办了。其中一个解决办法是，直接修改origin远程库的url路径为Https协议就好了 :</p>

<pre><code>teddywu@TEDDYWU-PC4 /C/Users/teddywu.TENCENT/devkit/octopress (source)
$ cd _deploy/
teddywu@TEDDYWU-PC4 /C/Users/teddywu.TENCENT/devkit/octopress/_deploy (master)
$ git remote rm origin
teddywu@TEDDYWU-PC4 /C/Users/teddywu.TENCENT/devkit/octopress/_deploy (master)
$ git remote add origin https://github.com/teddywuinfo/teddywuinfo.github.com.g
it
teddywu@TEDDYWU-PC4 /C/Users/teddywu.TENCENT/devkit/octopress/_deploy (master)
$ git remote -v
origin  https://github.com/teddywuinfo/teddywuinfo.github.com.git (fetch)
origin  https://github.com/teddywuinfo/teddywuinfo.github.com.git (push)
teddywu@TEDDYWU-PC4 /C/Users/teddywu.TENCENT/devkit/octopress/_deploy (master)
$
</code></pre>

<p>至此便可以通过https协议读写github，但麻烦的是每次都需要输入用户名和密码。但没办法啦不支持ssh，也只能这样了。</p>

<p>(完)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[bug 分享]octopress rake generate bug fix : Liquid Exception: invalid byte sequence in GBK in post]]></title>
    <link href="http://teddywuinfo.github.com/blog/2013/03/16/octopress-rake-generate-bug-fix-liquid-exception-invalid-byte-sequence-in-gbk-in-post/"/>
    <updated>2013-03-16T18:58:00+08:00</updated>
    <id>http://teddywuinfo.github.com/blog/2013/03/16/octopress-rake-generate-bug-fix-liquid-exception-invalid-byte-sequence-in-gbk-in-post</id>
    <content type="html"><![CDATA[<p>win 8 下 octopress 博客搭建的时候，在  rake generate 时发现如下错误：</p>

<pre><code>Liquid Exception: invalid byte sequence in GBK in post
</code></pre>

<!--more -->


<p>如下图：</p>

<p><img src="http://teddywuinfo.github.com/images/git/octopress%20rake%20generate.png" title="bug图" alt="bug图" /></p>

<p>分析： 这里的bug 出现时因为Ruby 里面 File.read 不支持 utf-8 导致。</p>

<p>解决方案：</p>

<p>到Ruby的安装目次<code>\lib\ruby\gems\1.9.1\gems\jekyll-0.11.2\lib\jekyll\</code>找到<code>convertible.rb</code>这个文件，批改</p>

<pre><code>self.content = File.read(File.join(base, name))
</code></pre>

<p>为</p>

<pre><code>self.content = File.read(File.join(base, name), :encoding =&gt; "utf-8")
</code></pre>

<p>如果在jekyll-0.12.0版本，另外在此文件也有同样问题：</p>

<p><code>\lib\ruby\gems\1.9.1\gems\jekyll-0.12.0\lib\jekyll\tags\include.rb</code></p>

<p>(完)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[向Zaker学习如何创业]]></title>
    <link href="http://teddywuinfo.github.com/blog/2013/03/10/what-i-should-learn-from-zaker/"/>
    <updated>2013-03-10T09:51:00+08:00</updated>
    <id>http://teddywuinfo.github.com/blog/2013/03/10/what-i-should-learn-from-zaker</id>
    <content type="html"><![CDATA[<p>自我介绍下，<a href="http://teddywu.info" title="泰迪的博客">泰迪</a>，89年天蝎男，关注移动互联网。我用的是小米，从2012年9月份左右开始有朋友推荐<a href="http://www.myzaker.com">ZAKER</a>这款软件，从此就爱不释手，也推荐了不少朋友使用这款软件。每天的碎片时间——吃饭、坐车、厕所或者无聊的时候都基本在刷ZAKER来看资讯和业界动态，每天使用时长估计有2个小时。</p>

<!--more -->


<p>我喜欢Zaker的原因有：</p>

<ol>
<li>聚合了几乎所有我想要的阅读媒体。我个人比较关注互联网新闻、娱乐新闻、心灵咖啡等等。之前下了很多各个媒体的阅读类的APP，非常多。ZAKER一站式聚合的阅读体验，让我觉得非常爽。</li>
<li>离线缓存功能，是省流量的神器啊。在公司先缓存好了，然后再车上、路上再也不用担心每个月的流量问题了。</li>
<li>可以分享到evernote、空间等。用zaker阅读、用evernote进行资料收集整理，然后输出博客，是我一个自我成长的闭环。</li>
<li>另外就是各种细节了，清爽无广告的阅读体验、流畅不卡的图片查看器等等。</li>
</ol>


<p>最初我以为这是一款大公司做的产品。因为不管用户体验、细节还是内容充实度都让我非常满意。后来发现这货居然是一个在广州的创业团队做的，感到意外之余，令我肃然起敬。</p>

<p>所以看到<a href="http://21sq.org/?p=2254">第八期TMT言畅会</a>，走进<a href="http://www.myzaker.com">ZAKER</a>，畅谈数字阅读的时候，毫不犹豫的报了名，很幸运地获得了这次机会，既可以听到不少干货，又可以参观ZAKER总部，爽~</p>

<p><img src="http://teddywuinfo.github.com/images/ZAKER/zaker1.jpg" title="第八期TMT言畅会" alt="第八期TMT言畅会" /></p>

<p><strong><em> 参观ZAKER公司 </em></strong></p>

<p>ZAKER公司位于广州市五山，在农机所内的一栋三层楼高的别墅。一楼、二楼开发办公，三楼是娱乐休息室。目前员工数量大概是60人，绝大部分都是年轻人。办公室看起来很简介舒服。</p>

<p><img src="http://teddywuinfo.github.com/images/ZAKER/floor1.jpg" title="ZAKER二楼" alt="ZAKER二楼" /></p>

<p><img src="http://teddywuinfo.github.com/images/ZAKER/floor2.5.jpg" title="ZAKER夹层会议室" alt="ZAKER夹层会议室" /></p>

<p><img src="http://teddywuinfo.github.com/images/ZAKER/xianchang.jpg" title="现场" alt="现场" /></p>

<p><strong><em> 关于ZAKER </em></strong></p>

<pre><code> ZAKER是一款个性化订阅和资讯聚合的多媒体阅读软件，使用非常简单。
 ZAKER将微博、博客、图片、RSS等众多内容，按照用户个人意愿聚合到一起，
 实现深度个性化定制，具有微博邮件等 社群化互动分享功能，
 具备精美杂志版式的阅读形态，逼真与立体的翻页效果。
</code></pre>

<p><strong><em> 关于用户量 </em></strong></p>

<p>时间            用户量</p>

<p>2010年12月  0</p>

<p>2011年4月  30万</p>

<p>2012年1月 200万（ipad 100万，iphone100万，安卓刚上线没纳入统计）</p>

<p>2012年6月 600万</p>

<p>2012年7月 800万</p>

<p>2012年10月 900万</p>

<p>2013年1月 1400万</p>

<p>2013年3月 1500万</p>

<p>……</p>

<p>（以上数据全部来源于网络）</p>

<p>从2010年12月ipad版上线的这两年时间内，ZAKER的用户量实现了从0到1500万的快速积累，速度非常惊人。目前40%用户来自安卓、iphone 30%、ipad30%、win 8和wp的量少于1%。 年龄群体大概是20-45岁，职业为大学生、都市白领、IT从业人士等。最受欢迎的类别里面，新闻占25%、科技占20%、娱乐类占20%。</p>

<p><img src="http://teddywuinfo.github.com/images/ZAKER/data1.jpg" title="数据1" alt="数据1" />
<img src="http://teddywuinfo.github.com/images/ZAKER/data2.jpg" title="数据2" alt="数据2" />
<img src="http://teddywuinfo.github.com/images/ZAKER/data4.jpg" title="数据4" alt="数据4" /></p>

<p>融资方面，ZAKER已经得到君联资本的A轮投资250万美元。森和说，曾经一个月有上百家VC找过他。资金方面目前不是问题。</p>

<p>盈利模式方面，到目前为止ZAKER还没有赢利，本来我以为是赢利点的“应用推荐”模块原来只是因为合作需要加上去的，本身并不产生赢利。ZAKER走的是免费加广告的模式，森和一直强调现在量还没上来，还没有足够的广告价值。而且广告系统还在研发当中。至于未来的广告绝对不会“像网页广告那样，很土鳖”，会加于ZAKER“独一无二的创意”，考虑会用“游戏”或者其他创新的形式。</p>

<p>ZAKER的核心价值，我认为主要有两点。第一个是媒体优势，ZAKER可以利用到做读览天下的时候积累的媒体资源。据森和说，有1800家传统媒体的内容已经可以直接拿过来。这种资源优势是巨大且是得天独厚的。第二个技术优势，ZAKER 自主研发了自动排版系统，能够全自动地把内容按杂志的形式来排版，而且显示出来的效果非常的好。</p>

<p><img src="http://teddywuinfo.github.com/images/ZAKER/lisenhe.jpg" title="李森和" alt="李森和" />
<img src="http://teddywuinfo.github.com/images/ZAKER/lisenhe2.jpg" title="李森和" alt="李森和" /></p>

<p>为什么ZAKER能够做到今天这种规模呢？我认为有以下几点值得借鉴和学习的地方：</p>

<p>1.积累自身优势和资源</p>

<p>说实在，前期积累的1800家媒体资源优势是我认为对于ZAKER目前的成功非常重要的。我了解到的是，这些媒体资源都是在做读览天下的时候一个一个慢慢积累起来的。积累了四五年才有这样的规模。在ipad刚推出来的时间点，如果才想到要去做这样的一个阅读类平台，才去跟媒体一个个地谈，已经晚了。ZAKER一开始便拥有了巨大的优势，与同行已经拉开了很大的差距。给我的反思是，作为互联网从业着，可以尝试多点接触传统行业，积累传统行业的资源。当该行业准备搭上互联网的大船的时候，既有互联网基因，又有传统行业资源的你就拥有了独一无二的巨大优势。互联网与传统行业其实不是对立的关系，不是说互联网抢了传统行业的饭碗，不是的。互联网只是一个工具。互联网和传统行业都是为用户提供价值，并获取应得的利润。互联网只是改变了传统行业服务用户的方式，本质还是不变的。因此，互联网从业者不能只把眼光放在互联网上，也应该放到传统行业上。想一想，互联网怎么样能够帮助这个行业发展地更好。</p>

<p>2.把核心优势做到极致</p>

<p>ZAKER一直专注于要做出杂志的感觉。让ZAKER看起来像杂志一样舒服。有几个细节我影响很深刻。一个是在做自动化排版系统的时候，ZAKER的同事把国内外大大小小的杂志的风格都扫了遍去寻找杂志看起来舒服的规律。最后总结出来20多种排版方案，进过微调后便慢慢衍化成现在的排版系统。另外一个是对字体的近乎刻薄的讲究。ZAKER觉得中文字体里面的英文很烂，而好看的英文字体又不支持中文。为了追求杂志的感觉，不惜购买了方正的字体并对其英文字母进行改造。这两个细节让我觉得这个产品真的是很用心很有诚意。也是这种把事情做到最好的信念，让ZAKER在众多阅读类应用中眼前一亮。</p>

<p>3.坚守理念</p>

<p>ZAKER多次强调说只做平台、不碰内容。坚守媒体在ZAKER上的流量全部回归媒体的理念不动摇。坚守量没达到那个份上绝不推出广告。只有坚守理念，才会给媒体一个定心丸，才可以留住媒体，才可以留住用户。如果只图快点出广告变现，是非常短视的行为。</p>

<p>另外，ZAKER在成长的初期也有些野蛮和盲目：</p>

<ol>
<li>最初在做ipad版的时候，因为只有两个人在开发。为了快速上线，UI层直接全部抄袭了flipoard。这种行为到底可不可取？</li>
<li>事先没有得到一些博客主、媒体的同意，先把他们的内容拿过来，事后再去谈版权的事情。这种行为可不可取？</li>
<li>初期为了抢用户，在ZAKER中实现了新浪微博客户端，抢占微博用户，这种行为可不可取？</li>
<li>为了亮点去制造亮点，比如3D翻页效果这种只赚噱头的东西，到底有没有价值？</li>
</ol>


<p>从理性和客观来讲，抄袭界面、侵犯版权是不道德、甚至是违法的行为。但鉴于在天朝的法律制度不太完善，这种事情没太多人去理会。只要打着为了用户着想的旗帜，先用了再说，事后再擦屁股，从目前的ZAKER的成功来看，对于创业者&#8230;自己去衡量吧。关于抢微博用户这点，我认为是没必要的。去调用新浪微博的接口去实现一个新浪微博客户端不是一件轻松的事，要投入不少人力。而且当时的微博客户端很烂只是暂时的，作为新浪微博在移动端布局的产品，新浪无论如何都会把新浪微博客户端做好。所以长远来看，ZAKER内嵌的微博客户端就成了鸡肋。（但我觉得加入热门微博、或者订阅某个名人的微博还是可取的）。至于3D翻页效果，投入产出比不大，对于创业团队，这种噱头的东西没太大必要。只要把自己的核心功能做极致，其实就是最大的噱头。</p>

<p><strong><em> 关于ZAKER的未来 </em></strong></p>

<p><img src="http://teddywuinfo.github.com/images/ZAKER/talk.jpg" title="对话" alt="对话" /></p>

<p>随着ZAKER用户量的迅速增长，以及广告系统的搭建。我对ZAKER的发展是很看好的。如果ZAKER的广告系统搭建完毕，一个完整的生态系统就构造完毕。媒体、读者和作为平台的ZAKER，将为达成三者共赢，并形成良性正向的发展，完全有可能达成亿级的市场规模。未来ZAKER要面临的主要问题，一个是ZAKER目前的人力和技术，是否有能力搭建起足够给力的广告系统。另外一个是面对腾讯、网易等大公司在阅读类应用方面开始发力的时候，能不能守得住。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始写博客]]></title>
    <link href="http://teddywuinfo.github.com/blog/2013/02/17/i-want-to-blog/"/>
    <updated>2013-02-17T20:18:00+08:00</updated>
    <id>http://teddywuinfo.github.com/blog/2013/02/17/i-want-to-blog</id>
    <content type="html"><![CDATA[<p>酝酿了很久，终于下定决心要写博客。自知自己的毅力不是很强，不知道能坚持多久，但既然有了这个想法和冲动，就要动起手来。不能让以后的我后悔。很多人觉得博客已经过时了，现在都流行微博。为什么我还要写博客呢？</p>

<!-- more -->


<h3>目的</h3>

<ol>
<li>写博客，能够帮助自己把零散的资料和经验转化为结构化的知识。在写博客的过程，能够强迫自己对某个主题进行深入挖掘。把原来零散的信息转化搭建起来自己的知识体系。</li>
<li>写博客，可以把自己的经验和更多的人进行分享。在分享过程中，经过不断的讨论，往往能把问题看的更加深入和透彻。</li>
<li>写博客，可以能够认识更多志同道合的朋友。</li>
<li>写博客，也是一个窗口，让让更多的人了解你、认识你，提高个人的影响力。</li>
</ol>


<h3>内容</h3>

<p>我的博客内容主要的题材是记录我的工作和一些技术的积累。以后也许会变化，但那是以后的事了。</p>

<h3>工作流</h3>

<ul>
<li>在evernote上收集某个话题的素材</li>
<li>通过思维导图进行整合</li>
<li>整理后输出博客</li>
</ul>


<h3>建博客要求</h3>

<ul>
<li>要有自己的域名</li>
<li>要对博客的内容要有把控权</li>
<li>保持简单</li>
<li>可以很方便地迁移博客数据</li>
<li>尽可能便宜</li>
</ul>


<h3>方案</h3>

<h4>博客系统</h4>

<p>在博客系统的选择上面，可以选择强大开源免费的wordpress博客系统。另外可以选择用jekyll的方案。</p>

<p><a href="http://cn.wordpress.org/">wordpress</a> 是全球最出名的博客系统，相信不用多做介绍。</p>

<p>jekyll 是一个简洁的、特别针对博客平台的静态网站生成器。它使用一个模板目录作为网站布局的基础框架，并在其上运行 Textile 、 Markdown 或 Liquid 标记语言的转换器，最终生成一个完整的静态Web站点，可以被放置在Apache或者你喜欢的其他任何Web服务器上。它同时也是 <a href="http://pages.github.com/">GitHub Pages</a> 、一个由 GitHub 提供的用于托管项目主页或博客的服务，在后台所运行的引擎。</p>

<p>wordpress的优点是，它是最流行的博客软件，拥有数以万计的插件和主题。使用人数众多，搭建非常容易。但它对比jekyll来讲也有以下缺点：数据以数据库的方式存储；需要使用服务器来托管，因此需要付出托管费用。</p>

<p>jekyll的优点在于它的简单，博客可以原文保存在本地，方便数据迁移和本地阅读。另外使用github pages静态资源托管服务，可以免去了托管的费用。jekyll方案的缺点是需要学习ruby、markdown、git等一大堆新技术和语法；另外jekyll提供样式主题很少；由于使用人数不多，可能会遇到很多坑，搭建起来比较麻烦。</p>

<p>最后，我还是选择了jekyll的方案。一来可以有机会学习新的知识。二来免去了托管费用对我来说是个挺大的吸引力。三来可以本地存储博客文章是一个非常优雅的方式。</p>

<h4>域名</h4>

<p>另外在域名方面，我选择了<a href="http://www.godaddy.com">godaddy</a>的服务。优点多多，一来便宜；还不用备案；服务有保障，而且支付可以使用支付宝和财富通，还是很方便的。于是我申请了我的个人博客域名：<a href="http://www.teddywu.info">www.teddywu.info</a>。一年的价格才2.99美金，相当划算。当然第二年就不会这么便宜了。其实我最想买的域名是teddywu.it或者gaogao.it。it后缀的域名本来是指italiy的。但用来暗指Information Technology还是挺有意思的。但价格略贵，要30多美金，就先Hold住了。</p>

<h4>DNS 域名解析服务</h4>

<p>一般DNS解析服务都是由域名提供商提供。后来朋友推荐使用<a href="https://www.dnspod.cn">dnspod</a>这个第三方DNS域名解析服务商来解析DNS。发现还真的挺不错的。这里也推荐一下。只要在DNSPOD网站上注册帐号，然后将在godaddy购买的域名默认给的name server解析域名更改为dnspod提供的域名。等待3分钟到2天不等，即可。使用<a href="https://www.dnspod.cn">dnspod</a>的好处是它的用户界面简洁易懂，配置方便。另外还有监控提醒等功能。使用起来相当舒服。</p>

<h3>实践</h3>

<p>具体搭建博客也是一门学问。我先是用jekyll搭建起来了博客，跑了起来。这个过程可以参考阮一峰写的博客《<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">搭建一个免费的，无限流量的Blog&#8212;-github Pages和Jekyll入门</a>》。 后来发现有个jekyll的框架<a href="http://octopress.org/">octopress</a>还不错。就又折腾半天使用<a href="http://octopress.org/">octopress</a>进行搭建。详情请参考《<a href="http://easypi.github.com/blog/2013/01/05/using-octopress-to-setup-blog-on-github/">利用Octopress在github Pages上搭建个人博客</a>》。在这里不作赘述。</p>

<p>相关的文章可供参考：</p>

<ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">搭建一个免费的，无限流量的Blog&#8212;-github Pages和Jekyll入门</a></li>
<li><a href="http://www.soimort.org/posts/101/">像黑客一样写博客——Jekyll入门</a></li>
<li><a href="http://easypi.github.com/blog/2013/01/05/using-octopress-to-setup-blog-on-github/">利用Octopress在github Pages上搭建个人博客</a></li>
</ul>


<p>当然在搭建过程中我也遇到了不少坑。比如中文支持的问题，防火墙的问题等。在以后的博客中再进行详述。</p>

<p>最后，赞一下自己，能有耐心写到这里。希望我能长期坚持下去。加油！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown语法测试]]></title>
    <link href="http://teddywuinfo.github.com/blog/2013/02/10/markdown-example/"/>
    <updated>2013-02-10T22:26:00+08:00</updated>
    <id>http://teddywuinfo.github.com/blog/2013/02/10/markdown-example</id>
    <content type="html"><![CDATA[<p>此文主要是用于熟悉markdown的一些常用用法，分别显示了原文格式和html化之后的格式。以供参考。</p>

<!-- more -->


<pre><code>Markdown语法测试__这里是一级标题
========
作者：泰迪__这里是二级标题
-------

### 这里是三级标题 ###

#### 四级标题

******************
正文来了：
这里是第一段落。

空行表示另外一行。

******************
我是*真的*、_真的_、**真的**、 __真的__ 很爱你。
\*\*和\_\_表示强调。

******************
我祝大家：

* 身体健康
* 工作愉快
* 合家平安
******************

以下我想对大家说：

1. 我是teddy
2. 我是男的
3. 这个文档主要是记录markdown的语法

******************
这是我的[博客](http://teddywu.info "吴炜恒的博客")

这是我的[博客地址][吴炜恒的博客地址]另外的一种写法

这里是我的照片：

![泰迪](/images/teddy/teddy1.jpg "泰迪")

*****************
上面是分割线，下面讲讲代码的写法

其实只要tab缩进了，或者4个空格缩进了就是代码区域了，比如

    var cnt = 0;
    function add(a, b){
         return a+b;
    }
    var six = add(cnt,5);

用空格缩进的代码：
    @mixin shadow-box($border: #fff .5em solid, $shadow: rgba(#000, .15) 0 1px 4px, $border-radius: .3em) {
      @include border-radius($border-radius);
      @include box-shadow($shadow);
      @include box-sizing(border-box);
      border: $border;
    }

如果想行内使用的话可以用这个符号\`把代码包住，比如： `printfUI()`也可以

******************
子曾经说过：
&gt; ###《论语》
&gt; 学而时习之，不亦乐乎。
&gt;
&gt; 温故而知新，可以为师矣。

[吴炜恒的博客地址]: http://teddywu.info
</code></pre>

<hr />

<p>下面就是转码后的效果</p>

<h1>Markdown语法测试__这里是一级标题</h1>

<h2>作者：泰迪__这里是二级标题</h2>

<h3>这里是三级标题</h3>

<h4>四级标题</h4>

<hr />

<p>正文来了：
这里是第一段落。</p>

<p>空行表示另外一行。</p>

<hr />

<p>我是<em>真的</em>、<em>真的</em>、<strong>真的</strong>、 <strong>真的</strong> 很爱你。
**和__表示强调。</p>

<hr />

<p>我祝大家：</p>

<ul>
<li>身体健康</li>
<li>工作愉快</li>
<li>合家平安</li>
</ul>


<hr />

<p>以下我想对大家说：</p>

<ol>
<li>我是teddy</li>
<li>我是男的</li>
<li>这个文档主要是记录markdown的语法</li>
</ol>


<hr />

<p>这是我的<a href="http://teddywu.info" title="吴炜恒的博客">博客</a></p>

<p>这是我的<a href="http://teddywu.info">博客地址</a>另外的一种写法</p>

<p>这里是我的照片：</p>

<p><img src="http://teddywuinfo.github.com/images/teddy/teddy1.jpg" title="泰迪" alt="泰迪" /></p>

<hr />

<p>上面是分割线，下面讲讲代码的写法</p>

<p>其实只要tab缩进了，或者4个空格缩进了就是代码区域了，比如</p>

<pre><code>var cnt = 0;
function add(a, b){
     return a+b;
}
var six = add(cnt,5);
</code></pre>

<p>用空格缩进的代码：</p>

<pre><code>@mixin shadow-box($border: #fff .5em solid, $shadow: rgba(#000, .15) 0 1px 4px, $border-radius: .3em) {
  @include border-radius($border-radius);
  @include box-shadow($shadow);
  @include box-sizing(border-box);
  border: $border;
}
</code></pre>

<p>如果想行内使用的话可以用这个符号`把代码包住，比如： <code>printfUI()</code>也可以</p>

<hr />

<p>子曾经说过：</p>

<blockquote><h3>《论语》</h3>

<p>学而时习之，不亦乐乎。</p>

<p>温故而知新，可以为师矣。</p></blockquote>
]]></content>
  </entry>
  
</feed>
